#include <fstream>
#include <vector>
#include <bitset>
#include <queue>
#include <algorithm>
#include <utility>
#include <cstring>
#include <string>
#include <stack>
#include <deque>
#include <iomanip>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <list>
#include <iomanip>
#include<sstream>
 
using namespace std;
 
string file = "senat";
 
ifstream cin( (file + ".in").c_str() );
ofstream cout( (file + ".out").c_str() );
 
const int MAXN = 105;
const int oo = (1<<31)-1;
 
typedef vector<int> Graph[MAXN];
typedef vector<int> :: iterator It;
 
const inline int min(const int &a, const int &b) { if( a > b ) return b;   return a; }
const inline int max(const int &a, const int &b) { if( a < b ) return b;   return a; }
const inline void Get_min(int &a, const int b)    { if( a > b ) a = b; }
const inline void Get_max(int &a, const int b)    { if( a < b ) a = b; }
 
struct ClassComp {
    inline bool operator () (const int &a, const int &b) const {
        return a > b;
    }
};
 
int N, M, Cuplaj[MAXN], Pereche[MAXN];
Graph G;
bitset <MAXN> Used;
 
inline bool PairUp(int Node) {
    if(Used[Node])
        return false;
    Used[Node] = true;
    for(It it = G[Node].begin(), fin = G[Node].end(); it != fin ; ++ it)
        if(!Pereche[*it] || PairUp(Pereche[*it])) {
            Cuplaj[Node] = *it;
            Pereche[*it] = Node;
            return true;
        }
    return false;
}
 
char s[50000];
 
int main() {
    cin >> N >> M;
    cin.get();
    int x;
    for(int j = 1 ; j <= M ; ++ j) {
        cin.getline(s, 50000);
        stringstream S(s);
        while(S >> x) {
            G[j].push_back(x);
        }
    }
    for(bool ok = true ; ok ; ) {
        ok = false;
        Used.reset();
        for(int i = 1 ; i <= M ; ++ i)
            if(!Cuplaj[i])
                ok |= PairUp(i);
    }
    //Cuplaj[3] = 0;
    for(int i = 1 ; i <= M ; ++ i)
        if(Cuplaj[i])
            cout << Cuplaj[i] << '\n';
            else {
                cout.close();
                cout.open("senat.out");
                cout << 0 << '\n';
                cout.close();
                return 0;
            }
    cin.close();
    cout.close();
    return 0;
}
