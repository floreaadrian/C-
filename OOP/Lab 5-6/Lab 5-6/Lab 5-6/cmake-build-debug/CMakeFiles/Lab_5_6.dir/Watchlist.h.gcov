        -:    0:Source:/Users/adrianflorea/Codes/C++/OOP/Lab 5-6/Lab 5-6/Lab 5-6/./Watchlist.h
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://
        -:    2://  Watchlist.h
        -:    3://  Lab 5-6
        -:    4://
        -:    5://  Created by Adrian-Paul Florea on 4/3/18.
        -:    6://  Copyright Â© 2018 Adrian-Paul Florea. All rights reserved.
        -:    7://
        -:    8:
        -:    9:#ifndef Watchlist_h
        -:   10:#define Watchlist_h
        -:   11:
        -:   12:#pragma once
        -:   13:#include "DynamicArray.h"
        -:   14:
function _ZN9WatchlistD1Ev called 0 returned 0% blocks executed 0%
function _ZN9WatchlistD2Ev called 0 returned 0% blocks executed 0%
function _ZN9WatchlistC1ERKS_ called 0 returned 0% blocks executed 0%
function _ZN9WatchlistC2ERKS_ called 0 returned 0% blocks executed 0%
    #####:   15:class Watchlist {
    $$$$$:   15-block  0
    $$$$$:   15-block  1
    $$$$$:   15-block  2
    $$$$$:   15-block  3
        -:   16:private:
        -:   17:  DynamicArray<Tutorial> Tutorials;
        -:   18:  int current;
        -:   19:
        -:   20:public:
        -:   21:  Watchlist();
        -:   22:
        -:   23:  // Adds a tutorial to the playlist.
        -:   24:  void add(const Tutorial &tutorial);
        -:   25:  int deleteTutorial(const Tutorial &e);
        -:   26:  // Returns the tutorial that is currently playing.
        -:   27:  Tutorial getCurrentTutorial();
        -:   28:  int getCurrentNumber() { return this->current; }
        -:   29:
        -:   30:  DynamicArray<Tutorial> getTutorials() const { return Tutorials; }
        -:   31:  int deleteTutorialWatchlistNameAndPresenter(const std::string &presenter,
        -:   32:                                              const std::string &title);
        -:   33:  // Starts the playlist - plays the first tutorial.
        -:   34:  void play();
        -:   35:
        -:   36:  // Plays the next tutorial in the playlist.
        -:   37:  void next();
        -:   38:  DynamicArray<Tutorial> sort();
        -:   39:  // Checks if the playlist is empty.
        -:   40:  bool isEmpty();
        -:   41:  // tests
        -:   42:  void tests();
        -:   43:  void addTest();
        -:   44:  void deleteElemTest();
        -:   45:  void getCurrentTest();
        -:   46:  void getCurrentNumberTest();
        -:   47:  void deleteTest();
        -:   48:  void playTest();
        -:   49:  void nextTest();
        -:   50:  void emptyTest();
        -:   51:};
        -:   52:
        -:   53:#endif /* Watchlist_h */
